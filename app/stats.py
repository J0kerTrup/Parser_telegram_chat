import logging
import datetime
import pytz
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.tl.types import UserStatusOnline
from telethon.errors.rpcerrorlist import RPCError  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

logger = logging.getLogger(__name__)

async def get_chat_statistics(client, chat):
    if getattr(chat, 'broadcast', False):
        return "üö´", "üö´", "üö´"

    try:
        now = datetime.datetime.now(pytz.UTC)
        last_24h = now - datetime.timedelta(days=1)

        history = await client(GetHistoryRequest(
            peer=chat, 
            limit=100, 
            offset_id=0, 
            add_offset=0, 
            max_id=0, 
            min_id=0, 
            offset_date=None,  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
            hash=0
        ))
        messages = history.messages if history else []

        last_message_date = (
            messages[0].date.astimezone(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')
            if messages else "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
        )
        last_24h_messages = sum(1 for msg in messages if msg.date > last_24h)

        try:
            participants = await client.get_participants(chat)
            online_count = sum(1 for user in participants if isinstance(getattr(user, 'status', None), UserStatusOnline))
        except RPCError as e:
            logger.error(f"–û—à–∏–±–∫–∞ RPC –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {chat.title}: {e}")
            online_count = "‚ö†Ô∏è"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {chat.title}: {e}")
            online_count = "‚ö†Ô∏è"

        return last_message_date, last_24h_messages, online_count

    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ RPC –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {chat.title}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {chat.title}: {e}")
    
    return "‚ö†Ô∏è", "‚ö†Ô∏è", "‚ö†Ô∏è"
